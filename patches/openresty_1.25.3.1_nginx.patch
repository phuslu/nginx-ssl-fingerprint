diff --git a/src/event/ngx_event_openssl.c b/src/event/ngx_event_openssl.c
index 8a42b67..cc37e47 100644
--- a/src/event/ngx_event_openssl.c
+++ b/src/event/ngx_event_openssl.c
@@ -1792,6 +1792,170 @@ ngx_ssl_set_session(ngx_connection_t *c, ngx_ssl_session_t *session)
     return NGX_OK;
 }
 
+int
+ngx_ssl_client_hello_ja3_cb(SSL *s, int *al, void *arg) {
+    ngx_connection_t  *c = arg;
+
+    if (c == NULL) {
+        return 1;
+    }
+
+    if (c->ssl == NULL) {
+        return 1;
+    }
+
+    c->ssl->fp_ja3_data.len = SSL_client_hello_get_ja3_data(c->ssl->connection, NULL);
+
+    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0, "ngx_ssl_client_hello_ja3_cb: alloc %d bytes", c->ssl->fp_ja3_data.len);
+
+    c->ssl->fp_ja3_data.data = ngx_pnalloc(c->pool, c->ssl->fp_ja3_data.len);
+    c->ssl->fp_ja3_data.len = SSL_client_hello_get_ja3_data(c->ssl->connection, c->ssl->fp_ja3_data.data);
+
+    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0, "ngx_ssl_client_hello_ja3_cb: used %d bytes", c->ssl->fp_ja3_data.len);
+
+    return 1;
+}
+
+static inline unsigned char *
+append_uint16(unsigned char* dst, uint16_t n)
+{
+    if (n < 10) {
+        *dst = n + '0';
+        dst++;
+    } else if (n < 100) {
+        *(dst+1) = n % 10 + '0';
+        *dst = n / 10 + '0';
+        dst += 2;
+    } else if (n < 1000) {
+        *(dst+2) = n % 10 + '0';
+        n /= 10;
+        *(dst+1) = n % 10 + '0';
+        *dst = n / 10 + '0';
+        dst += 3;
+    }  else if (n < 10000) {
+        *(dst+3) = n % 10 + '0';
+        n /= 10;
+        *(dst+2) = n % 10 + '0';
+        n /= 10;
+        *(dst+1) = n % 10 + '0';
+        *dst = n / 10 + '0';
+        dst += 4;
+    } else {
+        *(dst+4) = n % 10 + '0';
+        n /= 10;
+        *(dst+3) = n % 10 + '0';
+        n /= 10;
+        *(dst+2) = n % 10 + '0';
+        n /= 10;
+        *(dst+1) = n % 10 + '0';
+        *dst = n / 10 + '0';
+        dst += 5;
+    }
+
+    return dst;
+}
+
+#define IS_GREASE_CODE(code) (((code)&0x0f0f) == 0x0a0a && ((code)&0xff) == ((code)>>8))
+
+void
+ngx_ssl_client_hello_ja3_fp(ngx_connection_t *c) {
+    u_char *ptr = NULL, *data = NULL;
+    size_t num = 0, i;
+    uint16_t n, greased = 0;
+
+    if (c == NULL) {
+        return;
+    }
+
+    if (c->ssl == NULL) {
+        return;
+    }
+
+    c->ssl->fp_ja3_str.len = c->ssl->fp_ja3_data.len * 3;
+    c->ssl->fp_ja3_str.data = ngx_pnalloc(c->pool, c->ssl->fp_ja3_str.len);
+
+    /* start */
+    data = c->ssl->fp_ja3_data.data;
+    if (!data) {
+        return;
+    }
+
+    /* version */
+    ptr = c->ssl->fp_ja3_str.data;
+    ptr = append_uint16(ptr, *(uint16_t*)data);
+    *ptr++ = ',';
+    data += 2;
+
+    /* ciphers */
+    num = *(uint16_t*)data;
+    for (i = 2; i <= num; i += 2) {
+        n = ((uint16_t)data[i]) << 8 | ((uint16_t)data[i+1]);
+        if (!IS_GREASE_CODE(n)) {
+            /* if (data[i] == 0x13) {
+                c->ssl->fp_ja3_str.data[2] = '2'; // fixup tls1.3 version
+            } */
+            ptr = append_uint16(ptr, n);
+            *ptr++ = '-';
+        } else if (greased == 0) {
+            greased = n;
+        }
+    }
+    *(ptr-1) = ',';
+    data += 2 + num;
+
+    /* extensions */
+    num = *(uint16_t*)data;
+    for (i = 2; i <= num; i += 2) {
+        n = *(uint16_t*)(data+i);
+        if (!IS_GREASE_CODE(n)) {
+            ptr = append_uint16(ptr, n);
+            *ptr++ = '-';
+        }
+    }
+    if (num != 0) {
+        *(ptr-1) = ',';
+        data += 2 + num;
+    } else {
+        *(ptr++) = ',';
+    }
+
+
+    /* groups */
+    num = *(uint16_t*)data;
+    for (i = 2; i < num; i += 2) {
+        n = ((uint16_t)data[i]) << 8 | ((uint16_t)data[i+1]);
+        if (!IS_GREASE_CODE(n)) {
+            ptr = append_uint16(ptr, n);
+            *ptr++ = '-';
+        }
+    }
+    if (num != 0) {
+        *(ptr-1) = ',';
+        data += num;
+    } else {
+        *(ptr++) = ',';
+    }
+
+    /* formats */
+    num = *(uint8_t*)data;
+    for (i = 1; i < num; i++) {
+        ptr = append_uint16(ptr, (uint16_t)data[i]);
+        *ptr++ = '-';
+    }
+    if (num != 0) {
+        data += num;
+        *(ptr-1) = ',';
+        *ptr-- = 0;
+    }
+
+    /* end */
+    c->ssl->fp_ja3_str.len = ptr - c->ssl->fp_ja3_str.data;
+
+    /* greased */
+    c->ssl->fp_tls_greased = greased;
+
+    return;
+}
 
 ngx_int_t
 ngx_ssl_handshake(ngx_connection_t *c)
@@ -1812,11 +1976,16 @@ ngx_ssl_handshake(ngx_connection_t *c)
 
     ngx_ssl_clear_error(c->log);
 
+    SSL_CTX_set_client_hello_cb(c->ssl->session_ctx, ngx_ssl_client_hello_ja3_cb, c);
+
     n = SSL_do_handshake(c->ssl->connection);
 
     ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0, "SSL_do_handshake: %d", n);
 
     if (n == 1) {
+        ngx_ssl_client_hello_ja3_fp(c);
+
+        ngx_log_debug2(NGX_LOG_DEBUG_EVENT, c->log, 0, "ngx_ssl_client_hello_ja3_fp: str=[%V], length=[%d]", &c->ssl->fp_ja3_str, c->ssl->fp_ja3_str.len);
 
         if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
             return NGX_ERROR;
diff --git a/src/event/ngx_event_openssl.h b/src/event/ngx_event_openssl.h
index c062f91..8fd7174 100644
--- a/src/event/ngx_event_openssl.h
+++ b/src/event/ngx_event_openssl.h
@@ -128,6 +128,10 @@ struct ngx_ssl_connection_s {
     unsigned                    in_ocsp:1;
     unsigned                    early_preread:1;
     unsigned                    write_blocked:1;
+
+    ngx_str_t                   fp_ja3_data;
+    ngx_str_t                   fp_ja3_str;
+    uint16_t                    fp_tls_greased;
 };
 
 
diff --git a/src/http/v2/ngx_http_v2.c b/src/http/v2/ngx_http_v2.c
index 0f5bd3d..a0de05d 100644
--- a/src/http/v2/ngx_http_v2.c
+++ b/src/http/v2/ngx_http_v2.c
@@ -301,6 +301,14 @@ ngx_http_v2_init(ngx_event_t *rev)
         ngx_add_timer(rev, cscf->client_header_timeout);
     }
 
+    h2c->fp_fingerprinted = 0;
+    h2c->fp_settings.data = ngx_pnalloc(c->pool, 30);
+    h2c->fp_settings.len = 0;
+    h2c->fp_priorities.data = ngx_pnalloc(c->pool, 32);
+    h2c->fp_priorities.len = 0;
+    h2c->fp_pseudoheaders.data = ngx_pnalloc(c->pool, 32);
+    h2c->fp_pseudoheaders.len = 0;
+
     c->idle = 1;
     ngx_reusable_connection(c, 0);
 
@@ -1352,6 +1360,14 @@ ngx_http_v2_state_headers(ngx_http_v2_connection_t *h2c, u_char *pos,
         }
     }
 
+    if (!h2c->fp_fingerprinted && h2c->fp_priorities.len < 32) {
+        h2c->fp_priorities.data[h2c->fp_priorities.len] = (uint8_t)stream->node->id;
+        h2c->fp_priorities.data[h2c->fp_priorities.len+1] = (uint8_t)excl;
+        h2c->fp_priorities.data[h2c->fp_priorities.len+2] = (uint8_t)depend;
+        h2c->fp_priorities.data[h2c->fp_priorities.len+3] = (uint8_t)(weight-1);
+        h2c->fp_priorities.len += 4;
+    }
+
     return ngx_http_v2_state_header_block(h2c, pos, end);
 
 rst_stream:
@@ -1774,6 +1790,13 @@ ngx_http_v2_state_process_header(ngx_http_v2_connection_t *h2c, u_char *pos,
         goto error;
     }
 
+    if (!h2c->fp_fingerprinted && h2c->fp_pseudoheaders.len < 32) {
+        if (header->name.data[0] == ':' && header->name.len > 1)
+            h2c->fp_pseudoheaders.data[h2c->fp_pseudoheaders.len++] = header->name.data[1];
+        else
+            h2c->fp_pseudoheaders.data[h2c->fp_pseudoheaders.len++] = header->name.data[0];
+    }
+
     if (header->name.data[0] == ':') {
         rc = ngx_http_v2_pseudo_header(r, header);
 
@@ -2194,6 +2217,12 @@ ngx_http_v2_state_settings_params(ngx_http_v2_connection_t *h2c, u_char *pos,
         ngx_log_debug2(NGX_LOG_DEBUG_HTTP, h2c->connection->log, 0,
                        "http2 setting %ui:%ui", id, value);
 
+        if (!h2c->fp_fingerprinted && h2c->fp_settings.len < 30) {
+            h2c->fp_settings.data[h2c->fp_settings.len] = (uint8_t)id;
+            *(uint32_t*)(h2c->fp_settings.data + h2c->fp_settings.len + 1)  = (uint32_t)value;
+            h2c->fp_settings.len += 5;
+        }
+
         switch (id) {
 
         case NGX_HTTP_V2_INIT_WINDOW_SIZE_SETTING:
@@ -2207,6 +2236,10 @@ ngx_http_v2_state_settings_params(ngx_http_v2_connection_t *h2c, u_char *pos,
                                                   NGX_HTTP_V2_FLOW_CTRL_ERROR);
             }
 
+            if (!h2c->fp_fingerprinted) {
+                h2c->fp_windowupdate = value;
+            }
+
             window_delta = value - h2c->init_window;
             break;
 
diff --git a/src/http/v2/ngx_http_v2.h b/src/http/v2/ngx_http_v2.h
index 6751b30..c6733ea 100644
--- a/src/http/v2/ngx_http_v2.h
+++ b/src/http/v2/ngx_http_v2.h
@@ -168,6 +168,12 @@ struct ngx_http_v2_connection_s {
     unsigned                         table_update:1;
     unsigned                         blocked:1;
     unsigned                         goaway:1;
+
+    unsigned                         fp_fingerprinted:1;
+    ngx_str_t                        fp_settings;
+    ngx_uint_t                       fp_windowupdate;
+    ngx_str_t                        fp_priorities;
+    ngx_str_t                        fp_pseudoheaders;
 };
 
 
