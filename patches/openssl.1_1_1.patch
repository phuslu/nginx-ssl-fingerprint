diff --git a/include/openssl/ssl.h b/include/openssl/ssl.h
index b744f6ccc1..049f639446 100644
--- a/include/openssl/ssl.h
+++ b/include/openssl/ssl.h
@@ -1818,6 +1818,7 @@ size_t SSL_client_hello_get0_ciphers(SSL *s, const unsigned char **out);
 size_t SSL_client_hello_get0_compression_methods(SSL *s,
                                                  const unsigned char **out);
 int SSL_client_hello_get1_extensions_present(SSL *s, int **out, size_t *outlen);
+size_t SSL_client_hello_get_ja3_str(SSL *s, unsigned char *str, uint16_t *greased);
 int SSL_client_hello_get0_ext(SSL *s, unsigned int type,
                               const unsigned char **out, size_t *outlen);
 
diff --git a/include/openssl/tls1.h b/include/openssl/tls1.h
index 76d9fda46e..a29114f215 100644
--- a/include/openssl/tls1.h
+++ b/include/openssl/tls1.h
@@ -131,6 +131,15 @@ extern "C" {
 /* ExtensionType value from RFC7627 */
 # define TLSEXT_TYPE_extended_master_secret      23
 
+/* ExtensionType value from RFC6961 */
+# define TLSEXT_TYPE_status_request_v2           17
+/* [draft-ietf-tls-certificate-compression] */
+# define TLSEXT_TYPE_compress_certificate        27
+/* ExtensionType value from RFC8449 */
+# define TLSEXT_TYPE_record_size_limit           28
+/* ExtensionType value from RFC7639 */
+# define TLSEXT_TYPE_application_settings        17513
+
 /* ExtensionType value from RFC4507 */
 # define TLSEXT_TYPE_session_ticket              35
 
diff --git a/ssl/ssl_lib.c b/ssl/ssl_lib.c
index 25a1a44785..3bc3faee41 100644
--- a/ssl/ssl_lib.c
+++ b/ssl/ssl_lib.c
@@ -5205,6 +5205,134 @@ int SSL_client_hello_get1_extensions_present(SSL *s, int **out, size_t *outlen)
     return 0;
 }
 
+static inline unsigned char *append_uint16(unsigned char* dst, uint16_t n)
+{
+    if (n < 10) {
+        *dst = n + '0';
+        dst++;
+    } else if (n < 100) {
+        *(dst+1) = n % 10 + '0';
+        *dst = n / 10 + '0';
+        dst += 2;
+    } else if (n < 1000) {
+        *(dst+2) = n % 10 + '0';
+        n /= 10;
+        *(dst+1) = n % 10 + '0';
+        *dst = n / 10 + '0';
+        dst += 3;
+    }  else if (n < 10000) {
+        *(dst+3) = n % 10 + '0';
+        n /= 10;
+        *(dst+2) = n % 10 + '0';
+        n /= 10;
+        *(dst+1) = n % 10 + '0';
+        *dst = n / 10 + '0';
+        dst += 4;
+    } else {
+        *(dst+4) = n % 10 + '0';
+        n /= 10;
+        *(dst+3) = n % 10 + '0';
+        n /= 10;
+        *(dst+2) = n % 10 + '0';
+        n /= 10;
+        *(dst+1) = n % 10 + '0';
+        *dst = n / 10 + '0';
+        dst += 5;
+    }
+
+    return dst;
+}
+
+#define IS_GREASE_CODE(code) (((code)&0x0f0f) == 0x0a0a && ((code)&0xff) == ((code)>>8))
+
+size_t SSL_client_hello_get_ja3_str(SSL *s, unsigned char *str, uint16_t *greased)
+{
+    RAW_EXTENSION *ext;
+    const unsigned char *groups = NULL, *formats = NULL;
+    const unsigned char *data = NULL;
+    size_t num = 0, i;
+    uint16_t n;
+    unsigned char *ptr = str;
+
+    if (s->clienthello == NULL)
+        return 0;
+
+    if (str == NULL) {
+        num = 8 + 3*PACKET_remaining(&s->clienthello->ciphersuites);
+        for (i = 0; i < s->clienthello->pre_proc_exts_len; i++) {
+            ext = s->clienthello->pre_proc_exts + i;
+            if (ext->present) {
+                if (!IS_GREASE_CODE(ext->type)) {
+                    if (ext->type== 10)
+                        num += 3*PACKET_remaining(&ext->data);
+                    if (ext->type== 11)
+                        num += 2*PACKET_remaining(&ext->data);
+                    num += 3;
+                }
+            }
+        }
+        return num;
+    }
+
+    /* version */
+    ptr = append_uint16(ptr, (uint16_t)s->clienthello->legacy_version);
+    *ptr++ = ',';
+
+    /* ciphers */
+    data = PACKET_data(&s->clienthello->ciphersuites);
+    num = PACKET_remaining(&s->clienthello->ciphersuites);
+    for (i = 0; i < num; i+=2) {
+        n = ((uint16_t)data[i]) << 8 | ((uint16_t)data[i+1]);
+        if (!IS_GREASE_CODE(n)) {
+            if (data[i] == 0x13) {
+                str[2] = '2';
+            }
+            ptr = append_uint16(ptr, n);
+            *ptr++ = '-';
+        } else if (greased != NULL && *greased == 0) {
+            *greased = n;
+        }
+    }
+    *(ptr-1) = ',';
+
+    /* extensions */
+    for (i = 0; i < s->clienthello->pre_proc_exts_len; i++) {
+        ext = s->clienthello->pre_proc_exts + i;
+        if (ext->present) {
+            if (!IS_GREASE_CODE(ext->type)) {
+                if (ext->type== 10)
+                    groups = PACKET_data(&ext->data);
+                if (ext->type== 11)
+                    formats = PACKET_data(&ext->data);
+                ptr = append_uint16(ptr, (uint16_t)ext->type);
+                *ptr++ = '-';
+            }
+        }
+    }
+    *(ptr-1) = ',';
+
+    /* groups */
+    num = ((size_t)groups[0]) << 8 | ((size_t)groups[1]);
+    for (i = 2; i <= num; i+=2) {
+        n = ((uint16_t)groups[i]) << 8 | ((uint16_t)groups[i+1]);
+        if (!IS_GREASE_CODE(n)) {
+            ptr = append_uint16(ptr, n);
+            *ptr++ = '-';
+        }
+    }
+    *(ptr-1) = ',';
+
+    /* formats */
+    num = (size_t)formats[0];
+    for (i = 1; i <= num; i++) {
+        ptr = append_uint16(ptr, (uint16_t)formats[i]);
+        *ptr++ = '-';
+    }
+    *ptr-- = 0;
+
+    return ptr - str;
+}
+
 int SSL_client_hello_get0_ext(SSL *s, unsigned int type, const unsigned char **out,
                        size_t *outlen)
 {
diff --git a/ssl/ssl_local.h b/ssl/ssl_local.h
index 4c36cd5c89..ac0ec97b65 100644
--- a/ssl/ssl_local.h
+++ b/ssl/ssl_local.h
@@ -714,6 +714,10 @@ typedef enum tlsext_index_en {
     TLSEXT_IDX_cryptopro_bug,
     TLSEXT_IDX_early_data,
     TLSEXT_IDX_certificate_authorities,
+    TLSEXT_IDX_status_request_v2,
+    TLSEXT_IDX_compress_certificate,
+    TLSEXT_IDX_record_size_limit,
+    TLSEXT_IDX_application_settings,
     TLSEXT_IDX_padding,
     TLSEXT_IDX_psk,
     /* Dummy index - must always be the last entry */
diff --git a/ssl/statem/extensions.c b/ssl/statem/extensions.c
index 0f39275baa..7cb1e62287 100644
--- a/ssl/statem/extensions.c
+++ b/ssl/statem/extensions.c
@@ -377,6 +377,38 @@ static const EXTENSION_DEFINITION ext_defs[] = {
         tls_construct_certificate_authorities,
         tls_construct_certificate_authorities, NULL,
     },
+    {
+        TLSEXT_TYPE_status_request_v2,
+        SSL_EXT_CLIENT_HELLO,
+        NULL,
+        NULL, NULL,
+        NULL,
+        NULL, NULL,
+    },
+    {
+        TLSEXT_TYPE_compress_certificate,
+        SSL_EXT_CLIENT_HELLO,
+        NULL,
+        NULL, NULL,
+        NULL,
+        NULL, NULL,
+    },
+    {
+        TLSEXT_TYPE_record_size_limit,
+        SSL_EXT_CLIENT_HELLO,
+        NULL,
+        NULL, NULL,
+        NULL,
+        NULL, NULL,
+    },
+    {
+        TLSEXT_TYPE_application_settings,
+        SSL_EXT_CLIENT_HELLO,
+        NULL,
+        NULL, NULL,
+        NULL,
+        NULL, NULL,
+    },
     {
         /* Must be immediately before pre_shared_key */
         TLSEXT_TYPE_padding,
