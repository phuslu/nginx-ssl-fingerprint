diff --git a/src/event/ngx_event_openssl.c b/src/event/ngx_event_openssl.c
index 7b0417e4..ff16cfc8 100644
--- a/src/event/ngx_event_openssl.c
+++ b/src/event/ngx_event_openssl.c
@@ -8,6 +8,7 @@
 #include <ngx_config.h>
 #include <ngx_core.h>
 #include <ngx_event.h>
+#include <openssl/md5.h>
 
 
 #define NGX_SSL_PASSWORD_BUFFER_SIZE  4096
@@ -1710,6 +1711,166 @@ ngx_ssl_set_session(ngx_connection_t *c, ngx_ssl_session_t *session)
     return NGX_OK;
 }
 
+int
+ngx_ssl_client_hello_ja3_cb(SSL *s, int *al, void *arg) {
+    ngx_connection_t  *c = arg;
+
+    if (c == NULL) {
+        return 1;
+    }
+
+    if (c->ssl == NULL) {
+        return 1;
+    }
+
+    c->ssl->fp_ja3_data.len = SSL_client_hello_get_ja3_data(c->ssl->connection, NULL);
+
+    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0, "ngx_ssl_client_hello_ja3_cb: alloc %d bytes", c->ssl->fp_ja3_data.len);
+
+    c->ssl->fp_ja3_data.data = ngx_pnalloc(c->pool, c->ssl->fp_ja3_data.len);
+    c->ssl->fp_ja3_data.len = SSL_client_hello_get_ja3_data(c->ssl->connection, c->ssl->fp_ja3_data.data);
+
+    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0, "ngx_ssl_client_hello_ja3_cb: used %d bytes", c->ssl->fp_ja3_data.len);
+
+    return 1;
+}
+
+static inline unsigned char *
+append_uint16(unsigned char* dst, uint16_t n)
+{
+    if (n < 10) {
+        *dst = n + '0';
+        dst++;
+    } else if (n < 100) {
+        *(dst+1) = n % 10 + '0';
+        *dst = n / 10 + '0';
+        dst += 2;
+    } else if (n < 1000) {
+        *(dst+2) = n % 10 + '0';
+        n /= 10;
+        *(dst+1) = n % 10 + '0';
+        *dst = n / 10 + '0';
+        dst += 3;
+    }  else if (n < 10000) {
+        *(dst+3) = n % 10 + '0';
+        n /= 10;
+        *(dst+2) = n % 10 + '0';
+        n /= 10;
+        *(dst+1) = n % 10 + '0';
+        *dst = n / 10 + '0';
+        dst += 4;
+    } else {
+        *(dst+4) = n % 10 + '0';
+        n /= 10;
+        *(dst+3) = n % 10 + '0';
+        n /= 10;
+        *(dst+2) = n % 10 + '0';
+        n /= 10;
+        *(dst+1) = n % 10 + '0';
+        *dst = n / 10 + '0';
+        dst += 5;
+    }
+
+    return dst;
+}
+
+#define IS_GREASE_CODE(code) (((code)&0x0f0f) == 0x0a0a && ((code)&0xff) == ((code)>>8))
+
+void
+ngx_ssl_client_hello_ja3_fp(ngx_connection_t *c) {
+    u_char *ptr = NULL, *data = NULL;
+    size_t num = 0, i;
+    uint16_t n, greased = 0;
+    MD5_CTX ctx;
+    u_char hash[16] = {0};
+
+    if (c == NULL) {
+        return;
+    }
+
+    if (c->ssl == NULL) {
+        return;
+    }
+
+    c->ssl->fp_ja3_str.len = c->ssl->fp_ja3_data.len * 3;
+    c->ssl->fp_ja3_str.data = ngx_pnalloc(c->pool, c->ssl->fp_ja3_str.len);
+    c->ssl->fp_ja3_md5.len = 32;
+    c->ssl->fp_ja3_md5.data = ngx_pnalloc(c->pool, c->ssl->fp_ja3_md5.len);
+
+    /* start */
+    data = c->ssl->fp_ja3_data.data;
+
+    /* version */
+    ptr = c->ssl->fp_ja3_str.data;
+    ptr = append_uint16(ptr, *(uint16_t*)data);
+    *ptr++ = ',';
+    data += 2;
+
+    /* ciphers */
+    num = *(uint16_t*)data;
+    for (i = 2; i <= num; i += 2) {
+        n = ((uint16_t)data[i]) << 8 | ((uint16_t)data[i+1]);
+        if (!IS_GREASE_CODE(n)) {
+            /* if (data[i] == 0x13) {
+                c->ssl->fp_ja3_str.data[2] = '2'; // fixup tls1.3 version
+            } */
+            ptr = append_uint16(ptr, n);
+            *ptr++ = '-';
+        } else if (greased == 0) {
+            greased = n;
+        }
+    }
+    *(ptr-1) = ',';
+    data += 2 + num;
+
+    /* extensions */
+    num = *(uint16_t*)data;
+    for (i = 2; i <= num; i += 2) {
+        n = *(uint16_t*)(data+i);
+        if (!IS_GREASE_CODE(n)) {
+            ptr = append_uint16(ptr, n);
+            *ptr++ = '-';
+        }
+    }
+    *(ptr-1) = ',';
+    data += 2 + num;
+
+    /* groups */
+    num = *(uint16_t*)data;
+    for (i = 2; i < num; i += 2) {
+        n = ((uint16_t)data[i]) << 8 | ((uint16_t)data[i+1]);
+        if (!IS_GREASE_CODE(n)) {
+            ptr = append_uint16(ptr, n);
+            *ptr++ = '-';
+        }
+    }
+    *(ptr-1) = ',';
+    data += num;
+
+    /* formats */
+    num = *(uint8_t*)data;
+    for (i = 1; i < num; i++) {
+        ptr = append_uint16(ptr, (uint16_t)data[i]);
+        *ptr++ = '-';
+    }
+    *(ptr-1) = ',';
+    data += num;
+
+    /* end */
+    *ptr-- = 0;
+    c->ssl->fp_ja3_str.len = ptr - c->ssl->fp_ja3_str.data;
+
+    /* md5 */
+    MD5_Init(&ctx);
+    MD5_Update(&ctx, c->ssl->fp_ja3_str.data, c->ssl->fp_ja3_str.len);
+    MD5_Final(hash, &ctx);
+    ngx_hex_dump(c->ssl->fp_ja3_md5.data, hash, 16);
+
+    /* greased */
+    c->ssl->fp_tls_greased = greased;
+
+    return;
+}
 
 ngx_int_t
 ngx_ssl_handshake(ngx_connection_t *c)
@@ -1730,12 +1891,18 @@ ngx_ssl_handshake(ngx_connection_t *c)
 
     ngx_ssl_clear_error(c->log);
 
+    SSL_CTX_set_client_hello_cb(c->ssl->session_ctx, ngx_ssl_client_hello_ja3_cb, c);
+
     n = SSL_do_handshake(c->ssl->connection);
 
-    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0, "SSL_do_handshake: %d", n);
 
+    ngx_log_debug1(NGX_LOG_DEBUG_EVENT, c->log, 0, "SSL_do_handshake: %d", n);
+    
     if (n == 1) {
+        ngx_ssl_client_hello_ja3_fp(c);
 
+        ngx_log_debug3(NGX_LOG_DEBUG_EVENT, c->log, 0, "ngx_ssl_client_hello_ja3_fp: str=[%V], length=[%d], md5=[%V]", &c->ssl->fp_ja3_str, c->ssl->fp_ja3_str.len, &c->ssl->fp_ja3_md5);
+        
         if (ngx_handle_read_event(c->read, 0) != NGX_OK) {
             return NGX_ERROR;
         }
diff --git a/src/event/ngx_event_openssl.h b/src/event/ngx_event_openssl.h
index c9e86d9c..d037b956 100644
--- a/src/event/ngx_event_openssl.h
+++ b/src/event/ngx_event_openssl.h
@@ -119,6 +119,11 @@ struct ngx_ssl_connection_s {
     unsigned                    in_ocsp:1;
     unsigned                    early_preread:1;
     unsigned                    write_blocked:1;
+
+    ngx_str_t                   fp_ja3_data;
+    ngx_str_t                   fp_ja3_str;
+    ngx_str_t                   fp_ja3_md5;
+    uint16_t                    fp_tls_greased;
 };
 
 
